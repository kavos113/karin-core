name: build.yml
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  CMAKE_BUILD_TYPE: Release
  CMAKE_EXPORT_COMPILE_COMMANDS: true
  BUILD_DIR: build

jobs:
  run:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install ubuntu dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update
          sudo apt install -y cmake g++ make libx11-dev vulkan-sdk
        fi
      shell: bash

    - name: Install ninja
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get install -y ninja-build
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          choco install ninja -y
        fi
      shell: bash

    - name: Install with vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          ./vcpkg/bootstrap-vcpkg.sh
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          ./vcpkg/bootstrap-vcpkg.bat
        fi
        ./vcpkg/vcpkg install
      shell: bash

    - name: Configure CMake
      run: |
        mkdir ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -DCMAKE_EXPORT_COMPILE_COMMANDS=${{ env.CMAKE_EXPORT_COMPILE_COMMANDS }} ..
      shell: bash

    - name: Build
      run: |
        cd ${{ env.BUILD_DIR }}
        cmake --build .
      shell: bash

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ctest --output-on-failure
      shell: bash